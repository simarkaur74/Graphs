void dfs(int node,vector<int>adj[],vector<int>&vis,vector<int>&ans) {
    vis[node] = 1;
    ans.push_back(node);
    for(auto it:adj[node]) {
        if(!vis[it]) {
            dfs(it,adj,vis,ans);
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here
    vector<int> adj[V];
    for(int i=0;i<edges.size();i++) {
        vector<int> temp = edges[i];
        adj[temp[0]].push_back(temp[1]);
        adj[temp[1]].push_back(temp[0]);
    }
    vector<int> vis(V,0);
    vector<vector<int>> ans;
    for(int i=0;i<V;i++) {
        if(!vis[i]) {
            vector<int> vec;
            dfs(i,adj,vis,vec);
            ans.push_back(vec);
        }
    }
    return ans;
}
